version: "3.7"

services:
  # Umbrel-specific proxy configuration (needed to connect to Umbrel environment)
  app_proxy:
    environment:
      # The format here is: <app-id>_<docker-service-name>_1
      APP_HOST: stephenoyetoro-outline_server_1
      APP_PORT: 3000

  # Outline app service
  server:
    image: docker.getoutline.com/outlinewiki/outline:latest
    env_file:
      - ./docker.env  # Reference to your existing env file with all the necessary variables
    user: "1000:1000"  # Ensure proper user ID to avoid permission issues
    init: true
    volumes:
      - storage-data:/var/lib/outline/data
    depends_on:
      - postgres
      - redis
    command: >
      sh -c "
        yarn db:create --env=production-ssl-disabled &&
        yarn db:migrate --env=production-ssl-disabled &&
        yarn start
      "
  
  # Redis service (standard setup for Outline)
  redis:
    image: redis:latest
    expose:
      - "6379"
    volumes:
      - ./redis.conf:/redis.conf  # Ensure Redis configuration file exists and is correct
    command: ["redis-server", "/redis.conf"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 3

  # Postgres service (standard setup for Outline)
  postgres:
    image: postgres:latest
    expose:
      - "5432"
    volumes:
      - database-data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${POSTGRES_USER}  # These will come from your docker.env file
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    healthcheck:
      test: ["CMD", "pg_isready", "-d", "outline", "-U", "user"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Optional: HTTPS-Portal for SSL handling
  https-portal:
    image: steveltn/https-portal
    env_file: ./docker.env
    ports:
      - '80:80'
      - '443:443'
    links:
      - server  # Link the https-portal to the Outline server for SSL termination
    restart: always
    volumes:
      - https-portal-data:/var/lib/https-portal
    healthcheck:
      test: ["CMD", "service", "nginx", "status"]
      interval: 30s
      timeout: 20s
      retries: 3
    environment:
      DOMAINS: 'docs.mycompany.com -> http://server:3000'  # Adjust domain to your needs
      STAGE: 'production'
      WEBSOCKET: 'true'
      CLIENT_MAX_BODY_SIZE: '0'

volumes:
  https-portal-data:
  storage-data:
  database-data:
